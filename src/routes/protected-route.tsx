import type { ReactNode } from 'react'

import { jwtDecode } from 'jwt-decode'
import { Navigate, useLocation } from 'react-router-dom'

import { useAppSelector } from 'src/redux/hook'
import { selectCurrentUser } from 'src/redux/user/user-slice'

interface DecodedToken {
  uuid: string;
  name: string;
  type: number; // 2 = student, 3 = admin (tu·ª≥ theo h·ªá th·ªëng c·ªßa b·∫°n)
  functions: string[]; // danh s√°ch ƒë∆∞·ªùng d·∫´n ch·ª©c nƒÉng ƒë∆∞·ª£c ph√©p truy c·∫≠p
  exp: number; // th·ªùi gian h·∫øt h·∫°n token (UNIX timestamp)
}

interface ProtectedRouteProps {
  children: ReactNode;
}

function isAuthorized(path: string, allowedPaths: string[]): boolean {
  const basePath = path.split('?')[0]

  // ‚úÖ N·∫øu path l√† "/" (dashboard m·∫∑c ƒë·ªãnh), v√† user c√≥ √≠t nh·∫•t 1 quy·ªÅn, cho ph√©p v√†o
  if (basePath === '/' && allowedPaths.length > 0) {
    return true
  }

  // ‚úÖ Ki·ªÉm tra t·ª´ng quy·ªÅn
  for (const allowed of allowedPaths) {
    // Chuy·ªÉn route ƒë·ªông ki·ªÉu /user/information/:id th√†nh regex
    const regexPattern = '^' + allowed.replace(/:[^/]+/g, '[^/]+') + '$'
    const regex = new RegExp(regexPattern)

    if (regex.test(basePath)) {
      return true
    }
  }

  // ‚ùå Kh√¥ng kh·ªõp quy·ªÅn n√†o
  return false
}

const ProtectedRoute = ({ children }: ProtectedRouteProps) => {
  const location = useLocation()
  const currentUser = useAppSelector(selectCurrentUser)
  const userInfo = currentUser ? jwtDecode<DecodedToken>(currentUser.access_token) : null
  console.log('üöÄ ~ ProtectedRoute ~ userInfo:', userInfo)

  if (!userInfo) {
    return <Navigate to="/login" replace state={{ from: location }} />
  }

  // ‚úÖ ƒêi·ªÅu h∆∞·ªõng d·ª±a v√†o user_type
  if (userInfo.type === 2 && !location.pathname.startsWith('/student')) {
    return <Navigate to="/student" replace />
  }

  if ((userInfo.type === 3 || userInfo.type === 1) && location.pathname.startsWith('/student')) {
    return <Navigate to="/" replace />
  }

  // const hasAccess = isAuthorized(location.pathname, userInfo.functions)

  // if (!hasAccess && userInfo.type !== 2) {
  //   return <Navigate to="/404" replace />
  // }

  return children
}

export default ProtectedRoute
